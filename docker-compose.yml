version: '3.8'

services:
  # MySQL Database
  medisync-db:
    image: mysql:8.0
    container_name: medisync-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: medisync_db
      MYSQL_USER: medisync
      MYSQL_PASSWORD: password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Service
  medisync-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medisync-backend
    restart: always
    depends_on:
      medisync-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://medisync-db:3306/medisync_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: medisync
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      MEDISYNC_APP_JWT_SECRET: mediSyncSecretKeyForProduction2024
      MEDISYNC_APP_JWT_EXPIRATION_MS: 86400000
      MEDISYNC_APP_FRONTEND_URL: http://localhost:3000
    ports:
      - "8080:8080"
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Service
  medisync-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: medisync-frontend
    restart: always
    depends_on:
      medisync-backend:
        condition: service_healthy
    ports:
      - "3000:80"
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Session Management (Optional)
  medisync-redis:
    image: redis:7-alpine
    container_name: medisync-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - medisync-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional)
  medisync-nginx:
    image: nginx:alpine
    container_name: medisync-nginx
    restart: always
    depends_on:
      - medisync-frontend
      - medisync-backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - medisync-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  medisync-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
